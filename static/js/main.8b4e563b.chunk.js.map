{"version":3,"sources":["components/alert/Alert.module.scss","components/actions/Actions.module.scss","components/gifs/Gif.module.scss","redux/selectors.ts","redux/alertReducer.ts","api/api.ts","redux/gifReducer.ts","redux/actionsReducer.ts","components/actions/Actions.tsx","utils/index.ts","components/alert/Alert.tsx","components/gifs/Gif.tsx","components/gifs/GifsGroup.tsx","components/gifs/gifsContainer.tsx","components/app/App.tsx","randomTags.ts","redux/store.ts","index.tsx"],"names":["module","exports","getIsGroup","state","gif","isGroup","getIsLoading","isLoading","getGifs","gifs","getTag","actions","tag","getAlertMessage","alert","message","getAlertType","alertType","getAlertIsVisible","isVisible","getIsDelayMode","isDelayMode","initialState","payload","type","alertReducer","action","getGifsApi","axios","get","then","response","data","dispatch","a","actionsAl","includes","_getOneGif","_getSomeGifs","image_url","newGif","id","url","groupName","isSome","tagArray","split","Promise","all","map","results","every","someGif","reduce","prev","item","push","toString","imageReducer","actionsReducer","Actions","useSelector","useDispatch","className","classes","input","placeholder","value","onChange","e","target","actionsAc","replace","validateTagInput","tagInputHandler","btn","primary","disabled","onClick","actionsGif","danger","secondary","isGroupButtonHandler","Alert","React","useEffect","alertTimeout","setTimeout","clearTimeout","classNames","Gif","onGifClick","src","alt","u","GifsGroup","group","g","GifsContainer","useState","sortedGifs","setSortedGifs","length","sorted","acc","sortGifs","Object","keys","key","container","App","interval","setInterval","randomTag","wordList","Math","floor","random","getRandomTag","clearInterval","rootReducer","combineReducers","gifReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b4e563b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"Alert_alert__czMaU\",\"danger\":\"Alert_danger__32exf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"actions\":\"Actions_actions__3dEif\",\"btn\":\"Actions_btn__3XQ5S\",\"primary\":\"Actions_primary__Wuij1\",\"danger\":\"Actions_danger__axDil\",\"secondary\":\"Actions_secondary__1rnZo\",\"input\":\"Actions_input__SQ9Ze\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Gif_container__lgeq3\",\"gif\":\"Gif_gif__3WSSZ\",\"someGif\":\"Gif_someGif__1P5Gf\",\"groupName\":\"Gif_groupName__2TlTh\",\"group\":\"Gif_group__3EgkX\"};","import {AppStateType} from \"./store\";\r\n\r\nexport const getIsGroup = (state: AppStateType) => {\r\n    return state.gif.isGroup;\r\n};\r\nexport const getIsLoading = (state: AppStateType) => {\r\n    return state.gif.isLoading;\r\n};\r\nexport const getGifs = (state: AppStateType) => {\r\n    return state.gif.gifs;\r\n};\r\nexport const getTag = (state: AppStateType) => {\r\n    return state.actions.tag;\r\n};\r\nexport const getAlertMessage = (state: AppStateType) => {\r\n    return state.alert.message;\r\n};\r\nexport const getAlertType = (state: AppStateType) => {\r\n    return state.alert.alertType;\r\n};\r\nexport const getAlertIsVisible = (state: AppStateType) => {\r\n    return state.alert.isVisible;\r\n};\r\nexport const getIsDelayMode = (state: AppStateType) => {\r\n    return state.gif.isDelayMode;\r\n};\r\n\r\n","import {InferActionsTypes} from \"./store\";\r\n\r\n\r\nconst initialState = {\r\n    message: '',\r\n    alertType: '' as AlertType,\r\n    isVisible: false\r\n};\r\n\r\nconst alertReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SHOW_MESSAGE\":\r\n            return {\r\n                ...state,\r\n                message: action.payload.message,\r\n                alertType: action.payload.alertType,\r\n                isVisible: true\r\n            };\r\n        case \"HIDE_MESSAGE\":\r\n            return {\r\n                ...state,\r\n                isVisible: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    showMessage: (payload: ShowMessagePayloadType) => ({type: \"SHOW_MESSAGE\", payload} as const),\r\n    hideMessage: () => ({type: \"HIDE_MESSAGE\"} as const)\r\n};\r\n\r\nexport default alertReducer;\r\n\r\n//Types\r\ntype ShowMessagePayloadType = {\r\n    message: string,\r\n    alertType: AlertType\r\n}\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype AlertType = 'alert' | 'error';","import axios from 'axios';\r\n\r\nconst API_KEY = 'gTJAO48YcpmrADUyo4opy4ES4g7iDBxx';\r\nconst URL = 'https://api.giphy.com/v1/gifs/random';\r\n\r\ntype apiResponseType = {\r\n    data: {\r\n        id: string,\r\n        image_url: string\r\n    }\r\n}\r\n\r\nexport const getGifsApi = (tag: string) => {\r\n    return axios.get<apiResponseType>(`${URL}?api_key=${API_KEY}&tag=${tag}`).then(response => response.data);\r\n};","import {actions as actionsAl} from \"./alertReducer\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./store\";\r\nimport {getGifsApi} from \"../api/api\";\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    isGroup: false,\r\n    gifs: [] as Array<GifType>,\r\n    isDelayMode: false\r\n};\r\n\r\nconst imageReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_GIF\":\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                gifs: [action.payload, ...state.gifs]\r\n            };\r\n        case \"CLEAR_GIF\":\r\n            return {\r\n                ...state,\r\n                gifs: []\r\n            };\r\n        case \"CHANGE_IS_GROUP\":\r\n            return {\r\n                ...state,\r\n                isGroup: action.payload\r\n            };\r\n        case \"CHANGE_IS_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            };\r\n        case \"CHANGE_IS_DELAY_MODE\":\r\n            return {\r\n                ...state,\r\n                isDelayMode: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setGif: (payload: GifType) => ({type: \"SET_GIF\", payload} as const),\r\n    clearGif: () => ({type: \"CLEAR_GIF\"} as const),\r\n    changeIsLoading: (payload: boolean) => ({type: \"CHANGE_IS_LOADING\", payload} as const),\r\n    changeIsGroup: (payload: boolean) => ({type: \"CHANGE_IS_GROUP\", payload} as const),\r\n    changeIsDelayMode: (payload: boolean) => ({type: \"CHANGE_IS_DELAY_MODE\", payload} as const)\r\n};\r\n\r\nexport const getGifs = (tag: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.changeIsLoading(true));\r\n        if (tag === 'delay') {\r\n            dispatch(actionsAl.showMessage({alertType: \"alert\", message: \"Включен Delay\"}));\r\n            dispatch(actions.changeIsDelayMode(true));\r\n        } else if (!tag.includes(',')) {\r\n            await dispatch(_getOneGif(tag));\r\n        } else {\r\n            await dispatch(_getSomeGifs(tag));\r\n        }\r\n    } catch (e) {\r\n        dispatch(actionsAl.showMessage({message: `Произошла http ошибка`, alertType: 'error'}));\r\n    } finally {\r\n        dispatch(actions.changeIsLoading(false));\r\n    }\r\n};\r\n\r\nconst _getOneGif = (tag: string): ThunkType => async (dispatch) => {\r\n    let response = await getGifsApi(tag);\r\n\r\n    if (response.data.image_url) {\r\n        let newGif: GifType = {id: response.data.id, url: response.data.image_url, groupName: tag, isSome: false};\r\n        dispatch(actions.setGif(newGif));\r\n    } else {\r\n        dispatch(actionsAl.showMessage({message: 'По тегу ничего не найдено', alertType: 'alert'}));\r\n    }\r\n};\r\n\r\nconst _getSomeGifs = (tag: string): ThunkType => async (dispatch) => {\r\n    const tagArray = tag.split(',');\r\n\r\n    let results = await Promise.all(tagArray.map(tag => {\r\n        return getGifsApi(tag);\r\n    }));\r\n\r\n    const isAllGifsFetched = results.every(response => response.data.image_url);\r\n\r\n    if (isAllGifsFetched) {\r\n        let someGif = results.reduce<GifType>((prev, item) => {\r\n            if (typeof prev.url !== \"string\") {\r\n                prev.url.push(item.data.image_url);\r\n            }\r\n            prev.id += item.data.id;\r\n            prev.groupName = tagArray.toString();\r\n            return prev;\r\n        }, {url: [], id: '', groupName: '', isSome: true});\r\n        dispatch(actions.setGif(someGif));\r\n    } else {\r\n        dispatch(actionsAl.showMessage({message: 'По одному из тегов ничего не найдено', alertType: 'alert'}));\r\n    }\r\n};\r\n\r\nexport default imageReducer;\r\n\r\n//Types\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions | typeof actionsAl>\r\ntype ThunkType = CommonThunkType<ActionsType>\r\nexport type GifType = {\r\n    id: string,\r\n    url: string | string[],\r\n    groupName: string,\r\n    isSome: boolean\r\n}\r\n","import {InferActionsTypes} from \"./store\";\r\n\r\nconst initialState = {\r\n    tag: ''\r\n};\r\n\r\nconst actionsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_TAG\":\r\n            return {\r\n                ...state,\r\n                tag: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default actionsReducer;\r\n\r\n\r\nexport const actions = {\r\n    setGroupName: (payload: string) => ({type: \"SET_TAG\", payload} as const)\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;","import React, {ChangeEvent} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getIsGroup, getIsLoading, getTag} from \"../../redux/selectors\";\r\nimport {actions as actionsGif, getGifs} from \"../../redux/gifReducer\";\r\nimport {actions as actionsAc} from \"../../redux/actionsReducer\";\r\nimport {actions as actionsAl} from \"../../redux/alertReducer\";\r\nimport {validateTagInput} from '../../utils';\r\n\r\nimport classes from './Actions.module.scss';\r\n\r\nexport const Actions: React.FC = () => {\r\n    const tag = useSelector(getTag);\r\n    const isGroup = useSelector(getIsGroup);\r\n    const isLoading = useSelector(getIsLoading);\r\n    const dispatch = useDispatch();\r\n\r\n    const loadButtonHandler = () => {\r\n        dispatch(actionsGif.changeIsDelayMode(false));\r\n        if (tag) {\r\n            dispatch(getGifs(tag));\r\n            dispatch(actionsAc.setGroupName(''));\r\n        } else {\r\n            dispatch(actionsAl.showMessage({alertType: \"alert\", message: \"Заполните поле 'тег'\"}));\r\n        }\r\n    };\r\n\r\n    const clearButtonHandler = () => {\r\n        dispatch(actionsGif.changeIsDelayMode(false));\r\n        dispatch(actionsAc.setGroupName(''));\r\n        dispatch(actionsGif.clearGif());\r\n    };\r\n\r\n    const isGroupButtonHandler = (isGroup: boolean) => {\r\n        dispatch(actionsGif.changeIsDelayMode(false));\r\n        dispatch(actionsGif.changeIsGroup(isGroup));\r\n    };\r\n\r\n    const tagInputHandler = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const value = e.target.value;\r\n        dispatch(actionsAc.setGroupName(validateTagInput(value)));\r\n    };\r\n\r\n    return (\r\n        <div className={classes.actions}>\r\n            <input className={classes.input}\r\n                   type=\"text\"\r\n                   placeholder={'Введите тэг'}\r\n                   value={tag}\r\n                   onChange={(e) => tagInputHandler(e)}/>\r\n\r\n            <button className={classes.btn + ' ' + classes.primary}\r\n                    disabled={isLoading}\r\n                    onClick={loadButtonHandler}>\r\n                {isLoading ? 'Загрузка...' : 'Загрузить'}\r\n            </button>\r\n\r\n            <button className={classes.btn + ' ' + classes.danger}\r\n                    onClick={clearButtonHandler}>\r\n                Очистить\r\n            </button>\r\n\r\n            <button className={classes.btn + ' ' + classes.secondary}\r\n                    onClick={() => {\r\n                        isGroupButtonHandler(!isGroup);\r\n                    }}>\r\n                {isGroup ? 'Разгруппировать' : 'Группировать'}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n","export const validateTagInput = (value: string) => {\r\n    let regex = /[^A-Za-z-,]+$/;\r\n    return value.replace(regex, '');\r\n};","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {getAlertIsVisible, getAlertMessage, getAlertType} from \"../../redux/selectors\";\r\nimport React from \"react\";\r\nimport {actions} from \"../../redux/alertReducer\";\r\n\r\nimport classes from './Alert.module.scss';\r\n\r\nexport const Alert: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const message = useSelector(getAlertMessage);\r\n    const alertType = useSelector(getAlertType);\r\n    const isVisible = useSelector(getAlertIsVisible);\r\n\r\n    React.useEffect(() => {\r\n        const alertTimeout = setTimeout(() => {\r\n            dispatch(actions.hideMessage());\r\n        }, 3000);\r\n        return () => {\r\n            clearTimeout(alertTimeout);\r\n        };\r\n    },[dispatch, isVisible]);\r\n\r\n    const modalCloseHandler = () => {\r\n        dispatch(actions.hideMessage());\r\n    };\r\n\r\n    if (!isVisible) return null;\r\n\r\n    const classNames = alertType === 'alert' ? classes.alert : classes.alert + ' ' + classes.danger;\r\n    return (\r\n        <div className={classNames}>\r\n            <span onClick={modalCloseHandler}>&#10060;</span>\r\n            {message}\r\n        </div>\r\n    );\r\n};","import {GifType} from \"../../redux/gifReducer\";\r\nimport React from \"react\";\r\n\r\nimport classes from './Gif.module.scss';\r\n\r\ntype GifPropTypes = {\r\n    gif: GifType,\r\n    onGifClick: () => void\r\n}\r\n\r\nexport const Gif: React.FC<GifPropTypes> = ({onGifClick, gif}) => {\r\n    if (typeof gif.url !== 'object') {\r\n        return (\r\n            <div onClick={onGifClick}\r\n                 className={classes.gif}>\r\n                <img src={gif.url} alt={gif.groupName}/>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className={classes.someGif} onClick={onGifClick}>\r\n            {gif.url.map(u => {\r\n                return (\r\n                    <img src={u} key={u} alt={u}/>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};","import {GifType} from \"../../redux/gifReducer\";\r\nimport {Gif} from \"./Gif\";\r\nimport React from \"react\";\r\n\r\nimport classes from './Gif.module.scss';\r\n\r\ntype GifsGroupPropTypes = {\r\n    gifs: GifType[],\r\n    groupName: string,\r\n    onGifClick: (groupName: string) => void\r\n}\r\n\r\nexport const GifsGroup: React.FC<GifsGroupPropTypes> = ({gifs, groupName, onGifClick}) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.groupName}>{groupName}</div>\r\n            <div className={classes.group}>\r\n                {gifs.map(g => {\r\n                    return <Gif onGifClick={() => onGifClick(g.groupName)}\r\n                                key={g.id}\r\n                                gif={g}/>;\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getGifs, getIsGroup} from \"../../redux/selectors\";\r\nimport {Gif} from \"./Gif\";\r\nimport {actions} from \"../../redux/actionsReducer\";\r\nimport {GifsGroup} from \"./GifsGroup\";\r\n\r\nimport classes from './Gif.module.scss';\r\nimport {GifType} from \"../../redux/gifReducer\";\r\n\r\ntype SortedGifsType = {\r\n    [groupName: string] : GifType[]\r\n}\r\n\r\nexport const GifsContainer: React.FC = () => {\r\n    const [sortedGifs, setSortedGifs] = React.useState<SortedGifsType>({});\r\n\r\n    const isGroup = useSelector(getIsGroup);\r\n    const gifs = useSelector(getGifs);\r\n    const dispatch = useDispatch();\r\n\r\n    const onGifClick = (tag: string | string[]) => {\r\n        dispatch(actions.setGroupName(tag.toString()));\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        const sortGifs = () => {\r\n            const sorted: SortedGifsType = gifs.reduce((acc: any, gif) => {\r\n                if (!acc[gif.groupName]) {\r\n                    acc[gif.groupName] = [];\r\n                }\r\n                acc[gif.groupName].push(gif);\r\n                return acc;\r\n            }, []);\r\n            setSortedGifs(sorted);\r\n        };\r\n        if (gifs.length && isGroup) {\r\n            sortGifs();\r\n        }\r\n    }, [gifs, isGroup]);\r\n\r\n    if (!gifs.length) return <p>У вас еще нет гифок</p>;\r\n\r\n    return (\r\n        <div>\r\n            {isGroup\r\n                ? <div>\r\n                    {Object.keys(sortedGifs).map((groupName, key) => <GifsGroup\r\n                        onGifClick={onGifClick}\r\n                        key={key}\r\n                        gifs={sortedGifs[groupName]}\r\n                        groupName={groupName}/>)}\r\n                </div>\r\n                : <div className={classes.container}>\r\n                    {gifs.map(g => <Gif onGifClick={() => onGifClick(g.groupName)}\r\n                                        key={g.id}\r\n                                        gif={g}/>\r\n                    )}\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Actions} from '../actions/Actions';\r\nimport {Alert} from '../alert/Alert';\r\nimport {GifsContainer} from '../gifs/gifsContainer';\r\nimport {getRandomTag} from \"../../randomTags\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getGifs} from '../../redux/gifReducer';\r\nimport {getIsDelayMode} from \"../../redux/selectors\";\r\n\r\nimport './App.scss';\r\n\r\nexport const App = () => {\r\n    const dispatch = useDispatch();\r\n    const isDelayMode = useSelector(getIsDelayMode);\r\n\r\n    React.useEffect(() => {\r\n        let interval: any;\r\n        if (isDelayMode) {\r\n            interval = setInterval(() => {\r\n                let randomTag = getRandomTag();\r\n                dispatch(getGifs(randomTag));\r\n            }, 5000);\r\n        }\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [isDelayMode, dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Actions/>\r\n            <GifsContainer/>\r\n            <Alert/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","export const getRandomTag = () => {\r\n\r\n    let wordList = [\r\n        'canal', 'heartless', 'demonic', 'hone', 'lovingly', 'bearer', 'asthma', 'guise', 'jasmine', 'veronica', 'regent',\r\n        'decorator', 'loaf', 'talented', 'burned', 'sax', 'modernist', 'dark', 'remain', 'may', 'ore', 'sniff', 'strainer',\r\n        'womanhood', 'feared', 'shop', 'opaque', 'wobbly', 'turquoise', 'ravine', 'plumb', 'subsidize', 'facade', 'tantalize',\r\n        'sensory', 'threat', 'theme', 'infected', 'craving', 'final', 'i', 'buzz', 'discover', 'quarter', 'air', 'karaoke', 'rigor',\r\n        'alexis', 'wand', 'editing', 'lowland', 'seed', 'brazilian', 'rifle', 'historian', 'prescient', 'edith', 'immunize', 'thrift',\r\n        'secretive', 'inert', 'edge', 'breezy', 'tall', 'aphid', 'corner', 'nylon', 'wake', 'up', 'badge', 'lore', 'hack', 'tiger',\r\n        'cohort', 'elsewhere', 'retention', 'condo', 'terminal', 'plenty', 'dusty', 'detour', 'loin', 'opposite', 'abroad', 'castle',\r\n        'seclusion', 'overlook', 'benign', 'clinic', 'flashing', 'perk', 'cuisine', 'shelter', 'grit', 'haven', 'grope', 'turret',\r\n        'man', 'graphite', 'elephant'\r\n    ];\r\n    let rand = Math.floor(Math.random() * wordList.length);\r\n    return wordList[rand];\r\n};","import {applyMiddleware, combineReducers, createStore, Action} from \"redux\";\r\nimport gifReducer from \"./gifReducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\n\r\nimport alertReducer from \"./alertReducer\";\r\nimport actionsReducer from \"./actionsReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    gif: gifReducer,\r\n    alert: alertReducer,\r\n    actions: actionsReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type CommonThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport {App} from './components/app/App';\nimport store from \"./redux/store\";\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}